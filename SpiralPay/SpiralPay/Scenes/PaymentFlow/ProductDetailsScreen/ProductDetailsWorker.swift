//
//  ProductDetailsWorker.swift
//  SpiralPay
//
//  Created by Zoeb on 12/03/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

typealias processPaymentResponseHandler = (_ response:ProductDetails.ProcessPayment.Response) ->()

typealias cardTokenResponseHandler = (_ response:ProductDetails.CardToken.Response) ->()

class ProductDetailsWorker
{
    func processPaymentWith(request: ProductDetails.ProcessPayment.Request, successCompletionHandler: @escaping processPaymentResponseHandler, failureCompletionHandler: @escaping processPaymentResponseHandler)
    {
        RequestManager().processPayment(request: request.baseRequest()) { (status, response) in
            self.handleProcessPaymentHistoryResponse(success: successCompletionHandler, fail: failureCompletionHandler, status: status, response: response)
        }
    }
    
    func getCardTokenWith(request: ProductDetails.CardToken.Request, successCompletionHandler: @escaping cardTokenResponseHandler, failureCompletionHandler: @escaping cardTokenResponseHandler)
    {
        RequestManager().getCardToken(request: request.baseRequest()) { (status, response) in
            self.handleGetCardTokenResponse(success: successCompletionHandler, fail: failureCompletionHandler, status: status, response: response)
        }
    }
    
    //MARK: Parse methods
    
    public func handleProcessPaymentHistoryResponse(success:@escaping(processPaymentResponseHandler), fail:@escaping(processPaymentResponseHandler), status: Bool, response: Any?) {
        var message:String = Constants.kErrorMessage
        if status {
            if let result = response as? ProductDetails.ProcessPayment.Response {
                success(result)
                return
            }
        }
        else {
            if let result = response as? ProductDetails.ProcessPayment.Response {
                fail(result)
                return
            }
            else
            {
                if let result = response as? String {
                    message = result
                }
            }
        }
        fail(ProductDetails.ProcessPayment.Response(message:message)!)
    }
    
    public func handleGetCardTokenResponse(success:@escaping(cardTokenResponseHandler), fail:@escaping(cardTokenResponseHandler), status: Bool, response: Any?) {
        var message:String = Constants.kErrorMessage
        if status {
            if let result = response as? ProductDetails.CardToken.Response {
                success(result)
                return
            }
        }
        else {
            if let result = response as? ProductDetails.CardToken.Response {
                fail(result)
                return
            }
            else
            {
                if let result = response as? String {
                    message = result
                }
            }
        }
        fail(ProductDetails.CardToken.Response(message:message)!)
    }
    
}
