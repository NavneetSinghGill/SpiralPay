//
//  ProductDetailsInteractor.swift
//  SpiralPay
//
//  Created by Zoeb on 12/03/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductDetailsBusinessLogic
{
    func processPayment(request: ProductDetails.ProcessPayment.Request)
    func getCardToken(request: ProductDetails.CardToken.Request)
    func createPayment(request: ProductDetails.CreatePayment.Request)
    
    func getPaymentDetails(request: Home.PaymentDetail.Request)
}

protocol ProductDetailsDataStore
{
    
}

class ProductDetailsInteractor: ProductDetailsBusinessLogic, ProductDetailsDataStore
{
    var presenter: ProductDetailsPresentationLogic?
    var worker: ProductDetailsWorker?
    
    // MARK:- Process payment
    
    func processPayment(request: ProductDetails.ProcessPayment.Request) {
        worker = ProductDetailsWorker()
        worker?.processPaymentWith(request: request, successCompletionHandler: { (response) in
            self.presenter?.processPaymentSuccessWith(response: response)
        }, failureCompletionHandler: { (response) in
            self.presenter?.processPaymentFailureWith(response: response)
        })
    }
    
    func createPayment(request: ProductDetails.CreatePayment.Request) {
        worker = ProductDetailsWorker()
        worker?.createPaymentWith(request: request, successCompletionHandler: { (response) in
            self.presenter?.createPaymentSuccessWith(response: response)
        }, failureCompletionHandler: { (response) in
            self.presenter?.createPaymentFailureWith(response: response)
        })
    }
    
    func getCardToken(request: ProductDetails.CardToken.Request) {
        worker = ProductDetailsWorker()
        worker?.getCardTokenWith(request: request, successCompletionHandler: { (response) in
            self.presenter?.getCardTokenSuccessWith(response: response)
        }, failureCompletionHandler: { (response) in
            self.presenter?.getCardTokenFailureWith(response: response)
        })
    }
    
    func getPaymentDetails(request: Home.PaymentDetail.Request)
    {
        HomeContainerWorker().getPaymentDetailWith(request: request, successCompletionHandler: { (response) in
            self.presenter?.getPaymentDetailSuccessWith(response: response)
        }, failureCompletionHandler: { (response) in
            self.presenter?.getPaymentDetailFailureWith(response: response)
        })
        
    }
    
}
