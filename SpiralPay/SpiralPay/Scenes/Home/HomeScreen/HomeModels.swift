//
//  HomeModels.swift
//  SpiralPay
//
//  Created by Zoeb on 22/02/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ObjectMapper

enum Home
{
    // MARK: Use cases
    
    enum PaymentHistory
    {
        struct Request
        {
            var from: String?
            
            func baseRequest() -> BaseRequest {
                let baseRequest = BaseRequest()
                baseRequest.urlPath = "/v1/wallet/customers/\(User.shared.customerID ?? "")/payments?from=\(from ?? "")"
                
                baseRequest.parameters[BaseRequest.hasArrayResponse] = true
                
                return baseRequest
            }
        }
        struct Response: Mappable {
            
            private struct SerializationKeys {
                static let paymentId = "payment_id"
                static let merchantName = "merchant_name"
                static let created = "created"
                static let merchantLogoId = "merchant_logo_id"
                static let currency = "currency"
                static let amount = "amount"
                static let merchantId = "merchant_id"
                static let message = "message"
            }
            

            public var paymentId: String?
            public var merchantName: String?
            public var created: Int?
            public var merchantLogoId: String?
            public var currency: String?
            public var amount: Int?
            public var merchantId: String?
            public var message: String?
            
            public init?(map: Map){
                
            }
            
            public init?(message: String){
                self.message = message
            }
            
            public mutating func mapping(map: Map) {
                paymentId <- map[SerializationKeys.paymentId]
                merchantName <- map[SerializationKeys.merchantName]
                created <- map[SerializationKeys.created]
                merchantLogoId <- map[SerializationKeys.merchantLogoId]
                currency <- map[SerializationKeys.currency]
                amount <- map[SerializationKeys.amount]
                merchantId <- map[SerializationKeys.merchantId]
                message <- map[SerializationKeys.message]
            }
            
            public func dictionaryRepresentation() -> [String: Any] {
                var dictionary: [String: Any] = [:]
                if let value = paymentId { dictionary[SerializationKeys.paymentId] = value }
                if let value = merchantName { dictionary[SerializationKeys.merchantName] = value }
                if let value = created { dictionary[SerializationKeys.created] = value }
                if let value = merchantLogoId { dictionary[SerializationKeys.merchantLogoId] = value }
                if let value = currency { dictionary[SerializationKeys.currency] = value }
                if let value = amount { dictionary[SerializationKeys.amount] = value }
                if let value = merchantId { dictionary[SerializationKeys.merchantId] = value }
                if let value = message { dictionary[SerializationKeys.message] = value }
                return dictionary
            }
            
        }
    }
}
