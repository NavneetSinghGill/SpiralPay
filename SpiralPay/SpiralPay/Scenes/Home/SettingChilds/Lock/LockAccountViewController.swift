//
//  LockAccountViewController.swift
//  SpiralPay
//
//  Created by Zoeb on 06/04/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LockAccountDisplayLogic: class
{
    func lockAccountSuccess(response: LockAccount.LockAccount.Response)
    func lockAccountFailed(response: LockAccount.LockAccount.Response)
}

class LockAccountViewController: SpiralPayViewController, LockAccountDisplayLogic
{
    var interactor: LockAccountBusinessLogic?
    var router: (NSObjectProtocol & LockAccountRoutingLogic & LockAccountDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = LockAccountInteractor()
        let presenter = LockAccountPresenter()
        let router = LockAccountRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    @IBOutlet weak var lockButton: SpiralPayButton!
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        initialSetup()
    }
    
    //MARK:- APIs
    
    func lockAccount() {
        NLoader.startAnimating()
        interactor?.lockAccount(request: LockAccount.LockAccount.Request())
    }
    
    func lockAccountSuccess(response: LockAccount.LockAccount.Response) {
        NLoader.stopAnimating()
        DispatchQueue.main.async {
            ApplicationDelegate.showLoginScreenIfShould()
        }
    }
    
    func lockAccountFailed(response: LockAccount.LockAccount.Response) {
        NLoader.stopAnimating()
    }
    
    //MARK:- IBAction methods
    
    @IBAction func backButtonTapped() {
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func lockAccountButtonTapped() {
        lockAccount()
    }
    
    //MARK:- Private methods
    
    func initialSetup() {
        lockButton.isSelected = true
    }
}
