//
//  HomeContainerViewController.swift
//  SpiralPay
//
//  Created by Zoeb on 09/03/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeContainerDisplayLogic: class
{
    func getPaymentDetailSuccessWith(response: Home.PaymentDetail.Response)
    func getPaymentDetailFailureWith(response: Home.PaymentDetail.Response)
}

class HomeContainerViewController: SpiralPayViewController, HomeContainerDisplayLogic
{
    var interactor: HomeContainerBusinessLogic?
    var router: (NSObjectProtocol & HomeContainerRoutingLogic & HomeContainerDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = HomeContainerInteractor()
        let presenter = HomeContainerPresenter()
        let router = HomeContainerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    //MARK:- Variables
    
    var selectedVC: UIViewController? = nil
    @IBOutlet weak var containerView: UIView!
    @IBOutlet weak var tabBarCustomView: UIView!
    @IBOutlet weak var shadowView: UIView!
    @IBOutlet var tabBarItemViews: [TabBarItemView]!
    
    private lazy var loyaltyViewController: LoyaltyViewController = {
        // Load Storyboard
        let storyboard = UIStoryboard(name: "Main", bundle: Bundle.main)
        
        // Instantiate View Controller
        var viewController = storyboard.instantiateViewController(withIdentifier: "LoyaltyViewController") as! LoyaltyViewController
        
        // Add View Controller as Child View Controller
        self.add(asChildViewController: viewController)
        
        return viewController
    }()
    
    private lazy var homeViewController: HomeViewController = {
        // Load Storyboard
        let storyboard = UIStoryboard(name: "Main", bundle: Bundle.main)
        
        // Instantiate View Controller
        var viewController = storyboard.instantiateViewController(withIdentifier: "HomeViewController") as! HomeViewController
        
        // Add View Controller as Child View Controller
        self.add(asChildViewController: viewController)
        
        return viewController
    }()
    
    private lazy var mySpiralPayViewController: MySpiralPayViewController = {
        // Load Storyboard
        let storyboard = UIStoryboard(name: "Main", bundle: Bundle.main)
        
        // Instantiate View Controller
        var viewController = storyboard.instantiateViewController(withIdentifier: "MySpiralPayViewController") as! MySpiralPayViewController
        
        // Add View Controller as Child View Controller
        self.add(asChildViewController: viewController)
        
        return viewController
    }()
    
    private lazy var settingsViewController: SettingsViewController = {
        // Load Storyboard
        let storyboard = UIStoryboard(name: "Main", bundle: Bundle.main)
        
        // Instantiate View Controller
        var viewController = storyboard.instantiateViewController(withIdentifier: "SettingsViewController") as! SettingsViewController
        
        // Add View Controller as Child View Controller
        self.add(asChildViewController: viewController)
        
        return viewController
    }()
    
    //MARK:- View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.navigationController?.interactivePopGestureRecognizer?.isEnabled = false
        selectItemWith(tag: 102)
        showScreen(newScreen: homeViewController)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        //        shadowView.dropShadow()
        //        tabBarCustomView.dropShadow()
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    //MARK:- APIs
    
    func getProductDetailsWith(udid: String!) {
        NLoader.shared.startNLoader()
        var request = Home.PaymentDetail.Request()
        request.paymentID = udid
        
        interactor?.getPaymentDetails(request: request)
    }
    
    func getPaymentDetailSuccessWith(response: Home.PaymentDetail.Response) {
        NLoader.shared.stopNLoader()

        let productDetailsScreen = ProductDetailsViewController.create()
        if response.customerItems != nil && response.customerItems!.count > 0 {
            productDetailsScreen.paymentDetail = response
            productDetailsScreen.items = response.customerItems!
            self.navigationController?.pushViewController(productDetailsScreen, animated: true)
        }
    }
    
    func getPaymentDetailFailureWith(response: Home.PaymentDetail.Response) {
        NLoader.shared.stopNLoader()
    }
    
    //MARK:- IBAction methods
    
    @IBAction func tabButtonTapped(button: UIButton) {
        return ()
        resetUIAllTabs()
        selectItemWith(tag: button.tag)
        switch button.tag {
        case 101:
            showScreen(newScreen: loyaltyViewController)
        case 102:
            showScreen(newScreen: homeViewController)
        case 103:
            showScreen(newScreen: mySpiralPayViewController)
        case 104:
            showScreen(newScreen: settingsViewController)
        default:
            break
        }
    }
    
    @IBAction func payButtonTapped() {
        let scannerVC = ScannerViewController.create()
        scannerVC.scannerDelegate = self
        scannerVC.modalPresentationStyle = UIModalPresentationStyle.overCurrentContext
        if self.navigationController != nil {
            self.navigationController?.present(scannerVC, animated: true, completion: nil)
        } else {
            self.present(scannerVC, animated: true, completion: nil)
        }
    }
    
    //MARK:- Private methods
    
    private func resetUIAllTabs() {
        for tabBarItemView in tabBarItemViews {
            tabBarItemView.isSelected = false
        }
    }
    
    private func selectItemWith(tag: Int) {
        for tabBarItemView in tabBarItemViews {
            if tabBarItemView.tag == tag {
                tabBarItemView.isSelected = true
                break
            }
        }
    }
    
    //MARK:- Custom Tab bar/ Container view methods
    
    func showScreen(newScreen: UIViewController) {
        if selectedVC != nil {
            remove(asChildViewController: selectedVC!)
        }
        selectedVC = newScreen
        add(asChildViewController: newScreen)
    }
    
    private func add(asChildViewController viewController: UIViewController) {
        
        // Add Child View Controller
        addChildViewController(viewController)
        
        // Add Child View as Subview
        containerView.addSubview(viewController.view)
        
        // Configure Child View
        viewController.view.frame = containerView.bounds
        viewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        
        // Notify Child View Controller
        viewController.didMove(toParentViewController: self)
    }
    
    private func remove(asChildViewController viewController: UIViewController) {
        // Notify Child View Controller
        viewController.willMove(toParentViewController: nil)
        
        // Remove Child View From Superview
        viewController.view.removeFromSuperview()
        
        // Notify Child View Controller
        viewController.removeFromParentViewController()
    }
    
}

extension HomeContainerViewController: ScannerDelegate {
    
    func scanSuccessWith(code: String) {
        print("QR code: \(code)")
        //Do api and open Checkout screen.
        
        var slicedUDID = ""
        
        if let range = code.range(of: "pid_") {
            slicedUDID = String(code[range.upperBound..<code.endIndex])
            
            getProductDetailsWith(udid: slicedUDID)
        } else if let range = code.range(of: "cid_") {
            slicedUDID = String(code[range.upperBound..<code.endIndex])
        }
    }
    
}
