//
//  PhoneVerificationModels.swift
//  SpiralPay
//
//  Created by Zoeb on 07/02/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ObjectMapper

let sendSmsURLPrefix = "/v1/wallet/customers/"
let sendSmsURLSuffix = "/verify_number"
let updateMobileAndEmailUrlPrefix = "/v1/wallet/customers/"
let updateCustomerVerificationDataURLPrefix = "/v1/wallet/customers/"
let updateCustomerVerificationDataURLSuffix = "/verification_data"

var sendSmsURL: String {
    get {
        return "\(sendSmsURLPrefix)\(User.shared.customerID ?? "")\(sendSmsURLSuffix)"
    }
}

var updateCustomerVerificationDataURL: String {
    get {
        return "\(updateCustomerVerificationDataURLPrefix)\(User.shared.customerID ?? "")\(updateCustomerVerificationDataURLSuffix)"
    }
}

enum PhoneVerification
{
    // MARK: Use cases
    
    enum SmsPhoneVerification
    {
        struct Request
        {
            var phone: String?
            var code: String?
            
            func baseRequest() -> BaseRequest {
                let baseRequest = BaseRequest()
                baseRequest.urlPath = sendSmsURL
                baseRequest.parameters["phone"] = phone ?? ""
                baseRequest.parameters["code"] = code ?? ""
                return baseRequest
            }
        }
        struct Response: Mappable
        {
            
            // MARK: Declaration for string constants to be used to decode and also serialize.
            private struct SerializationKeys {
                static let message = "message"
            }
            
            // MARK: Properties
            public var message: String?
            
            // MARK: ObjectMapper Initializers
            /// Map a JSON object to this class using ObjectMapper.
            ///
            /// - parameter map: A mapping from ObjectMapper.
            public init?(map: Map){
                
            }
            public init?(message: String){
                self.message = message
            }
            
            /// Map a JSON object to this class using ObjectMapper.
            ///
            /// - parameter map: A mapping from ObjectMapper.
            public mutating func mapping(map: Map) {
                message <- map[SerializationKeys.message]
            }
            
            /// Generates description of the object in the form of a NSDictionary.
            ///
            /// - returns: A Key value pair containing all valid values in the object.
            public func dictionaryRepresentation() -> [String: Any] {
                var dictionary: [String: Any] = [:]
                if let value = message { dictionary[SerializationKeys.message] = value }
                return dictionary
            }
            
        }
    }
    enum UpdateMobileAndEmail
    {
        struct Request
        {
            var phone: String?
            var code: String?
            
            func baseRequest() -> BaseRequest {
                let baseRequest = BaseRequest()
                baseRequest.urlPath = "\(updateMobileAndEmailUrlPrefix)\(User.shared.customerID ?? "-")"
                baseRequest.parameters["phone"] = phone ?? User.shared.phoneWithCode
                baseRequest.parameters["email"] = code ?? User.shared.email
                baseRequest.apiType = .Put_UpdateMobileAndEmail
                return baseRequest
            }
        }
        struct Response: Mappable
        {
            
            private struct SerializationKeys {
                static let message = "message"
            }
            
            public var message: String?
            
            public init?(map: Map){
                
            }
            public init?(message: String){
                self.message = message
            }
            
            public mutating func mapping(map: Map) {
                message <- map[SerializationKeys.message]
            }
            
            public func dictionaryRepresentation() -> [String: Any] {
                var dictionary: [String: Any] = [:]
                if let value = message { dictionary[SerializationKeys.message] = value }
                return dictionary
            }
            
        }
    }
    
    enum UpdateCustomerVerificationData
    {
        struct Request
        {
            var status: String?
            var verificationID: String?
            
            func baseRequest() -> BaseRequest {
                let baseRequest = BaseRequest()
                baseRequest.urlPath = updateCustomerVerificationDataURL
                baseRequest.parameters["status"] = status ?? ""
                baseRequest.parameters["verification_id"] = verificationID ?? ""
                
                baseRequest.apiType = .Put_UpdateCustomerVerificationData
                return baseRequest
            }
        }
        struct Response: Mappable
        {
            
            private struct SerializationKeys {
                static let message = "message"
            }
            
            // MARK: Properties
            public var message: String?

            public init?(map: Map){
                
            }
            public init?(message: String){
                self.message = message
            }

            public mutating func mapping(map: Map) {
                message <- map[SerializationKeys.message]
            }

            public func dictionaryRepresentation() -> [String: Any] {
                var dictionary: [String: Any] = [:]
                if let value = message { dictionary[SerializationKeys.message] = value }
                return dictionary
            }
            
        }
    }
}
