//
//  PhoneVerificationInteractor.swift
//  SpiralPay
//
//  Created by Zoeb on 07/02/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PhoneVerificationBusinessLogic
{
    func sendSmsForPhoneVerification(request: PhoneVerification.SmsPhoneVerification.Request)
    func updateMobileAndEmail(request: PhoneVerification.UpdateMobileAndEmail.Request)
    func updateCustomerVerificationData(request: PhoneVerification.UpdateCustomerVerificationData.Request)
}

protocol PhoneVerificationDataStore
{
    //var name: String { get set }
}

class PhoneVerificationInteractor: PhoneVerificationBusinessLogic, PhoneVerificationDataStore
{
    var presenter: PhoneVerificationPresentationLogic?
    var worker: PhoneVerificationWorker?
    
    func sendSmsForPhoneVerification(request: PhoneVerification.SmsPhoneVerification.Request)
    {
        worker = PhoneVerificationWorker()
        worker?.sendSmsForPhoneVerification(request: request, successCompletionHandler: { (response) in
            self.presenter?.sendSmsForPhoneVerificationAPIsuccess(response: response)
        }, failureCompletionHandler: { (response) in
            self.presenter?.sendSmsForPhoneVerificationAPIfailure(response: response)
        })
    }
    
    func updateMobileAndEmail(request: PhoneVerification.UpdateMobileAndEmail.Request) {
        worker = PhoneVerificationWorker()
        worker?.updateMobileAndEmail(request: request, successCompletionHandler: { (response) in
            self.presenter?.updateMobileAndEmailAPIsuccess(response: response)
        }, failureCompletionHandler: { (response) in
            self.presenter?.updateMobileAndEmailAPIfailure(response: response)
        })
    }
    
    func updateCustomerVerificationData(request: PhoneVerification.UpdateCustomerVerificationData.Request) {
        worker = PhoneVerificationWorker()
        worker?.updateCustomerVerificationData(request: request, successCompletionHandler: { (response) in
            self.presenter?.updateCustomerVerificationDataAPIsuccess(response: response)
        }, failureCompletionHandler: { (response) in
            self.presenter?.updateCustomerVerificationDataAPIfailure(response: response)
        })
    }
    
}
