//
//  PhoneVerificationRouter.swift
//  SpiralPay
//
//  Created by Zoeb on 07/02/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol PhoneVerificationRoutingLogic
{
    func routeToEnterSmsPinScreen()
    func routeToSuccessFulVerificationScreen()
    func routeToFailedVerificationScreen()
    func routeToFirstPhoneVerificationScreen()
    func routeToConfirmDetailsScreen()
    func routeToChangeEmailScreen()
}

protocol PhoneVerificationDataPassing
{
  var dataStore: PhoneVerificationDataStore? { get }
}

class PhoneVerificationRouter: NSObject, PhoneVerificationRoutingLogic, PhoneVerificationDataPassing
{
    weak var viewController: PhoneVerificationViewController?
    var dataStore: PhoneVerificationDataStore?
    
    // MARK: Routing
    
    func routeToEnterSmsPinScreen() {
        let pvViewController: PhoneVerificationViewController = PhoneVerificationViewController.create()
        pvViewController.screenStatus = .EnterPin
        pvViewController.generatedCode = viewController?.generatedCode
        if let viewController = viewController {
            pvViewController.screenType = viewController.screenType
        }
        
        navigate(source: viewController!, destination: pvViewController)
    }
    
    func routeToSuccessFulVerificationScreen() {
        let pvViewController: PhoneVerificationViewController = PhoneVerificationViewController.create()
        pvViewController.screenStatus = .Success
        if let viewController = viewController {
            pvViewController.screenType = viewController.screenType
        }
        
        navigate(source: viewController!, destination: pvViewController)
    }
    
    func routeToFailedVerificationScreen() {
        let pvViewController: PhoneVerificationViewController = PhoneVerificationViewController.create()
        pvViewController.screenStatus = .Failed
        if let viewController = viewController {
            pvViewController.screenType = viewController.screenType
        }
        
        navigate(source: viewController!, destination: pvViewController)
    }
    
    func routeToFirstPhoneVerificationScreen() {
        var viewControllers: Array<UIViewController> = []
        
        for vController in viewController!.navigationController!.viewControllers {
            
            guard let vc = vController as? PhoneVerificationViewController else {
                viewControllers.append(vController)
                continue
            }
            
            viewControllers.append(vc)
            break
        }
        
        viewController?.navigationController?.setViewControllers(viewControllers, animated: true)
    }
    
    func routeToChangeEmailScreen() {
        var viewControllers: Array<UIViewController> = []
        
        for vController in viewController!.navigationController!.viewControllers {
            
            guard let vc = vController as? ChangeEmailViewController else {
                viewControllers.append(vController)
                continue
            }
            
            viewControllers.append(vc)
            break
        }
        
        viewController?.navigationController?.setViewControllers(viewControllers, animated: true)
    }
    
    func routeToConfirmDetailsScreen() {
        let confirmDetailsViewController: ConfirmDetailsViewController = ConfirmDetailsViewController.create()
        
        navigate(source: viewController!, destination: confirmDetailsViewController)
    }
    
    // MARK: Navigation
    
    func navigate(source: PhoneVerificationViewController, destination: UIViewController)
    {
        source.show(destination, sender: nil)
    }
}
