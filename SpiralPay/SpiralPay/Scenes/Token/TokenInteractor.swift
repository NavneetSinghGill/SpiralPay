//
//  TokenInteractor.swift
//  SpiralPay
//
//  Created by Zoeb on 11/12/17.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TokenBusinessLogic
{
    func fetchToken(request: Token.JWTToken.Request)
}

protocol TokenDataStore
{
    //var name: String { get set }
}

class TokenInteractor: TokenBusinessLogic, TokenDataStore
{
    var presenter: TokenPresentationLogic?
    var worker: TokenWorker?
//    var securityStorageWorker = SecurityStorageWorker()
    
    // MARK: Fetch JWT Token
    
    func fetchToken(request: Token.JWTToken.Request) {
        
        var fetchTokenAPI = true
        
        // check if valid token already exist
        if let accessTokenExpiry = UserDefaults.standard.object(forKey: Constants.kAccessTokenExpiryKey) as? Date {
            if accessTokenExpiry.isInFuture {
                // Access token is valid, fetch it from keychain
//                if securityStorageWorker.getKeychainValue(key: Constants.kAccessTokenKey) != nil {
//                    self.presenter?.presentNextScreen()
//                    fetchTokenAPI = false
//                }
            }
            else {
                // Access token is expired, check if refresh token is valid
                if let refreshTokenLife = UserDefaults.standard.object(forKey: Constants.kRefreshTokenLifeKey) as? Date {
                    if refreshTokenLife.isInFuture {
                        // Refresh token is valid, fetch it from keychain
//                        if let refreshToken = securityStorageWorker.getKeychainValue(key: Constants.kRefreshTokenKey) {
//                            // Fetch refresh token APi api/token/refresh
//                            worker = TokenWorker()
//                            worker?.fetchRefreshToken(refreshToken: refreshToken, success: { (response) in
//                                print(response)
//                                if self.securityStorageWorker.storeAccessTokenResponse(response: response) {
//                                    self.presenter?.presentNextScreen()
//                                    fetchTokenAPI = false
//                                }
//
//                            }, fail: { (response) in
//                                //TODO: show login screen
//                                //                                self.presenter?.presentError(response: response)
//
//                                // for now I am calling in a fresh way with assumption that we are calling it first time
//                                self.fetchJWTTokenAPI(request: request)
//
//                            })
//                            return
//                        }
                    }
                }
            }
        }
        else
        {
            // Not exist, First time
            fetchTokenAPI = true
        }
        
        if (fetchTokenAPI) {
            fetchJWTTokenAPI(request: request)
        }
    }
    
    func fetchJWTTokenAPI(request: Token.JWTToken.Request) {
        worker = TokenWorker()
        worker?.fetchJWTToken(request: request, success: { (response) in
            print(response)
//            if self.securityStorageWorker.storeAccessTokenResponse(response: response) {
//                self.presenter?.presentNextScreen()
//            }
            
        }, fail: { (response) in
            self.presenter?.presentError(response: response)
            
        })
    }
}

