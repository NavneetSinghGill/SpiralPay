//
//  DollarOneCardVerificationModels.swift
//  SpiralPay
//
//  Created by Zoeb on 04/06/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import ObjectMapper

enum DollarOneCardVerification
{
    // MARK: Use cases
    
    enum DollarOneCardVerification
    {
        struct Request
        {
            var cardToken: String?
            var cardNumber: String?
            var address: Dictionary<String,String>?
            
            func baseRequest() -> BaseRequest {
                let baseRequest = BaseRequest()
                baseRequest.urlPath = "/v1/wallet/customers/\(User.shared.customerID ?? "-")/verify_card"
                baseRequest.parameters["card_token"] = cardToken ?? ""
                baseRequest.parameters["customer_email"] = User.shared.email ?? ""
                baseRequest.parameters["card_number"] = cardNumber ?? ""
                if let address = address {
                    baseRequest.parameters["address"] = address
                }
                
                baseRequest.apiType = .Post_DollarOneCardVerification
                return baseRequest
            }
        }
        struct Response: Mappable
        {
            
            private struct SerializationKeys {
                static let status = "status"
                static let message = "message"
            }
            
            public var message: String?
            public var status: String?
            
            public init?(map: Map){
                
            }
            public init?(message: String){
                self.message = message
            }
            
            public mutating func mapping(map: Map) {
                message <- map[SerializationKeys.message]
                status <- map[SerializationKeys.status]
            }
            
            public func dictionaryRepresentation() -> [String: Any] {
                var dictionary: [String: Any] = [:]
                if let value = message { dictionary[SerializationKeys.message] = value }
                if let value = status { dictionary[SerializationKeys.status] = value }
                return dictionary
            }
            
        }
    }
    
}
