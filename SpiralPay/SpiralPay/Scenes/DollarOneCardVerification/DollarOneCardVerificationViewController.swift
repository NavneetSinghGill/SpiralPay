//
//  DollarOneCardVerificationViewController.swift
//  SpiralPay
//
//  Created by Zoeb on 04/06/18.
//  Copyright (c) 2018 EnvisionWorld. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DollarOneCardVerificationDisplayLogic: class
{
    func dollarOneCardVerificationAPIsuccess(response: DollarOneCardVerification.DollarOneCardVerification.Response)
    func dollarOneCardVerificationAPIfailure(response: DollarOneCardVerification.DollarOneCardVerification.Response)
}

class DollarOneCardVerificationViewController: UIViewController, DollarOneCardVerificationDisplayLogic
{
    var interactor: DollarOneCardVerificationBusinessLogic?
    var router: (NSObjectProtocol & DollarOneCardVerificationRoutingLogic & DollarOneCardVerificationDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = DollarOneCardVerificationInteractor()
        let presenter = DollarOneCardVerificationPresenter()
        let router = DollarOneCardVerificationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    //MARK:- Variables
    
    var dictOfCardToCheck: Dictionary<String,String>!
    var saveCardClosure = {}
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
    }
    
    //MARK:- IBAction methods
    
    @IBAction func okButtonTapped() {
        if var cardTokenRequest = Utils.shared.getDefaultCardTokenRequest(of: dictOfCardToCheck) {
            cardTokenRequest.amount = 1
            cardTokenRequest.currency = "GBP"
            
            NLoader.startAnimating()
            ProductDetailsWorker().getCardTokenWith(request: cardTokenRequest, successCompletionHandler: { (response) in
                if let token = response.token {
                    self.doDollarOneCardVerification(token: token, firstAndLast4Digits: Utils.shared.getFirstAndLast4DigitsOf(cardNumber: cardTokenRequest.number), address: cardTokenRequest.getAddressDict())
                } else {
                    NLoader.stopAnimating()
                }
            }) { (response) in
                NLoader.stopAnimating()
            }
        }
    }
    
    //MARK:- API calls
    
    func doDollarOneCardVerification(token: String!, firstAndLast4Digits: String!, address: Dictionary<String, String>!) {
        var request = DollarOneCardVerification.DollarOneCardVerification.Request()
        request.cardToken = token
        request.address = address
        request.cardNumber = firstAndLast4Digits
        
        interactor?.dollarOneCardVerification(request: request)
    }
    
    func dollarOneCardVerificationAPIsuccess(response: DollarOneCardVerification.DollarOneCardVerification.Response) {
        NLoader.stopAnimating()
        self.dismiss(animated: true) {
            self.saveCardClosure()
        }
    }
    
    func dollarOneCardVerificationAPIfailure(response: DollarOneCardVerification.DollarOneCardVerification.Response) {
        NLoader.stopAnimating()
    }
}
